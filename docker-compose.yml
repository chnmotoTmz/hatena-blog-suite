version: '3.8'

# ================================================
# Hatena Blog Suite - Docker Compose Configuration
# 統合はてなブログ管理スイート
# ================================================

services:
  # === Main Application ===
  hatena-suite:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: hatena-blog-suite-main
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
      - "${MCP_SERVER_PORT:-8083}:8083"
      - "${FLASK_PORT:-8084}:8084"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - MCP_SERVER_PORT=8083
      - FLASK_PORT=8084
      - ENVIRONMENT=docker
      - PYTHONPATH=/app
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./output:/app/output
      - ./config:/app/config
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
    networks:
      - suite-network
    depends_on:
      - redis
      - chroma-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # === Vector Database (ChromaDB) ===
  chroma-db:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: hatena-suite-chroma
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - suite-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Redis Cache ===
  redis:
    image: redis:7-alpine
    container_name: hatena-suite-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - suite-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # === Frontend ===
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hatena-suite-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_MCP_URL=http://localhost:8083
    volumes:
      - ./frontend/build:/app/build
    networks:
      - suite-network
    depends_on:
      - hatena-suite
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Nginx Reverse Proxy ===
  nginx:
    image: nginx:alpine
    container_name: hatena-suite-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    networks:
      - suite-network
    depends_on:
      - hatena-suite
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Monitoring (Prometheus) ===
  prometheus:
    image: prom/prometheus:latest
    container_name: hatena-suite-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - suite-network

  # === Monitoring (Grafana) ===
  grafana:
    image: grafana/grafana:latest
    container_name: hatena-suite-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - suite-network
    depends_on:
      - prometheus

# ================================================
# Networks
# ================================================
networks:
  suite-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# ================================================
# Volumes
# ================================================
volumes:
  redis_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ================================================
# Development Override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# ================================================